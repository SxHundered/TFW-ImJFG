package com.tfw.scoreboard;

import com.tfw.configuration.Style;
import lombok.Getter;
import org.bukkit.entity.Player;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.scoreboard.Scoreboard;

import java.util.ArrayList;
import java.util.List;

public class AsyncBoard extends BukkitRunnable {

    @Getter private final static List<PlayerBoard> boardArrayList = new ArrayList<>();

    private static final String[] args = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};

    public static void createTeams_Instance(Player player, PlayerBoard fastBoard){
        final Scoreboard scoreboard = fastBoard.getScoreboard();
   /*     String teamOrder =
                (args[fastBoard.getPlayerData().getRankWeight()] + "_" +
                        player.getName()).length() >= 16 ? (args[fastBoard.getPlayerData().getRankWeight()] + "_" +
                        player.getName()).substring(0, 15) : (args[fastBoard.getPlayerData().getRankWeight()] + "_" +
                        player.getName());
        fastBoard.getPlayerData().setTeam(teamOrder);
        scoreboard.registerNewTeam(teamOrder);
        generateTeam(player, teamOrder, fastBoard.getPlayerData().getRankColor().toString(), fastBoard);
    */}

    //Create teams for every new clan!
    private static void generateTeam(Player player, String name, String prefix, PlayerBoard fastBoard){
       /* Team team = fastBoard.getScoreboard().getTeam(name) == null ?
                (fastBoard.getScoreboard().registerNewTeam(name)) :
                (fastBoard.getScoreboard().getTeam(name));
        if (!team.hasEntry(player.getName())) {
            team.addEntry(player.getName());
            if (!fastBoard.getPlayerData().getClanTag().equalsIgnoreCase(""))
                fastBoard.getScoreboard().getTeam(name).setSuffix(" §7▏ §b" + fastBoard.getPlayerData().getClanTag());
            else
                team.setSuffix("");
            team.setPrefix(prefix);
        }*/
    }

    public static void delete(PlayerBoard fastBoard, String name){
        if (fastBoard.getScoreboard().getTeam(name) != null)
            fastBoard.getScoreboard().getTeam(name).unregister();
    }

    //Add all teams are generated by the console!
    private static void generate_ifExists(PlayerBoard fastBoard) {
     /*   PlayerManager.getPlayerDataList().forEach(playerData -> {
            if (playerData != null) {
                String teamName = playerData.getTeam();

                if (fastBoard.getScoreboard().getTeam(teamName) == null)
                    fastBoard.getScoreboard().registerNewTeam(teamName);

                if (!fastBoard.getScoreboard().getTeam(teamName).hasEntry(playerData.getPlayerName())) {

                    fastBoard.getScoreboard().getTeam(teamName).addEntry(playerData.getPlayerName());
                }


                if (!playerData.getClanTag().equalsIgnoreCase(""))
                    fastBoard.getScoreboard().getTeam(teamName).setSuffix(" §7▏ §b" + playerData.getClanTag());
                else fastBoard.getScoreboard().getTeam(teamName).setSuffix("");

                fastBoard.getScoreboard().getTeam(teamName).setPrefix(playerData.getRankColor().toString());
            }
        });
    */}


    public static void ping_clanChange(PlayerBoard fastBoard) {
       /* for (final PlayerData playerData : new ArrayList<>(PlayerManager.getPlayerDataList())) {
            if (playerData.isOnline()) {
                String teamName = playerData.getTeam();

                if (fastBoard.getScoreboard().getTeam(teamName) == null)
                    fastBoard.getScoreboard().registerNewTeam(teamName);

                if (!fastBoard.getScoreboard().getTeam(teamName).hasEntry(playerData.getPlayerName())) {
                    //suffiex = suffiex.length() >= 16 ? suffiex.substring(0, 14) : suffiex;
                    fastBoard.getScoreboard().getTeam(teamName).addEntry(playerData.getPlayerName());
                }
                fastBoard.getScoreboard().getTeam(teamName).setSuffix("");
                if (playerData.getClanTag().equalsIgnoreCase(""))
                    fastBoard.getScoreboard().getTeam(teamName).setSuffix("");

                fastBoard.getScoreboard().getTeam(teamName).setPrefix(playerData.getRankColor() + "");
            }
        }*/
    }

    public static void updateTitle(){
        for (PlayerBoard playerBoard : getBoardArrayList())
            if (playerBoard.getIScoreboard() != null && !playerBoard.getIScoreboard().isAnimated())
                playerBoard.updateTitle();
    }


    @Override
    public void run() {

        for (PlayerBoard scoreBoard : getBoardArrayList()){
            if (scoreBoard == null)
                continue;
            else if(!scoreBoard.getPlayerData().getSettings().isRefresh())
                continue;

            generate_ifExists(scoreBoard);

            //Update lines
            updateBoard(scoreBoard);
        }
    }

    private void updateBoard(PlayerBoard scoreBoard){
        List<String> replaceHolders = Style.translateLines_Holders(scoreBoard.getPlayerData().getPlayer(), scoreBoard.getIScoreboard().lines());

        scoreBoard.updateTitle();
        scoreBoard.updateLines(replaceHolders);
    }

}
